@using CFC.Models
@{    
    ViewBag.Title = "Gerar Gestão";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
    DateTime data = Convert.ToDateTime("01/" + DateTime.Today.AddMonths(1).Month + "/" + DateTime.Today.Year);

    var db = new cfcadminEntities();

    //var clientes = db.Clientes.Where(x => x.ClienteAtivo);
    var valores = db.Configuracoes.First();

    //var lista = (from x in db.Clientes.Where(x => x.ClienteAtivo)
    //             let i = db.Itens.Where(a => a.CodigoDocliente == x.CodigoDoCliente && a.DataDaDesativacao == null)
    //             let c = db.Configuracoes.FirstOrDefault()
    //             select new
    //             {
    //                 x.CodigoDoCliente,
    //                 descricao = x.CodigoDoCliente + " " + x.NomeCFC.ToUpper() + " | " + x.Cidades.NomeDaCidade.ToUpper() + "/" + x.Estados.NomeDoEstado + " | Itens:" + i.Count() + " | Cotas: "+ i.Sum(b => b.Valor)/10000 +" |  Valor: " + i.Count() * (c.ValorDaMensalidade + c.ValorTerceiro)
    //             }).ToList();

    //string todos = "-- GERAR TODOS " + clientes.Count() + " | ITENS ATIVOS " + itens.Count() + " | COTAS " + $"{(itens.Sum(x => x.Valor) / 10000):N4}" + " | TOTAL R$ " + $"{itens.Count() * (config.ValorDaMensalidade + config.ValorTerceiro):N2}" + " --";
    var sinistros = (from x in db.Sinistros.Where(x => x.DataDeConclusaoDoSinistro != null && x.DataDoFaturamento == null).OrderByDescending(x => x.CodigoDoSinistro)
                     join i in db.Itens on x.CodigoDoItem equals i.CodigoDoItem
                     select new
                     {
                         x.CodigoDoSinistro,
                         descricao = x.CodigoDoSinistro + " " + i.Placa1DoVeiculo + " - " + i.DescricaoDoModelo + " | " + i.Clientes.NomeCFC.ToUpper() + " - " + i.Clientes.Cidades.NomeDaCidade.ToUpper() + "/" + i.Clientes.Estados.NomeDoEstado
                     }).ToList();

    var itensTodos = db.Itens.GroupBy(item => item.CodigoDocliente)
        .Select(group => new {
            Cliente = group.Key + " " + group.FirstOrDefault(c => c.CodigoDocliente == group.Key).Clientes.NomeCFC + " | " + group.FirstOrDefault(c => c.CodigoDocliente == group.Key).Clientes.Cidades.NomeDaCidade + "/" + group.FirstOrDefault(c => c.CodigoDocliente == group.Key).Clientes.Estados.NomeDoEstado + " | ITENS " + group.Count(c => c.CodigoDocliente == group.Key)  + " |  GESTÃO " + group.Count(c => c.CodigoDocliente == group.Key) * (valores.ValorDaMensalidade + valores.ValorTerceiro) + " | " + (group.FirstOrDefault(c => c.CodigoDocliente == group.Key).Clientes.ClienteAtivo ? " (A)" : "D"),
            Grupo = group.Key,
            Itens = group.ToList()})
        .ToList();

    var itensAtivos = db.Itens.Where(x => x.DataDaDesativacao == null && x.Clientes.ClienteAtivo).GroupBy(item => item.CodigoDocliente)
        .Select(group => new
        {
            Cliente = group.Key + " " + group.FirstOrDefault(c => c.CodigoDocliente == group.Key).Clientes.NomeCFC + " | " + group.FirstOrDefault(c => c.CodigoDocliente == group.Key).Clientes.Cidades.NomeDaCidade + "/" + group.FirstOrDefault(c => c.CodigoDocliente == group.Key).Clientes.Estados.NomeDoEstado + " | ITENS " + group.Count(c => c.CodigoDocliente == group.Key) + " |  GESTÃO " + group.Count(c => c.CodigoDocliente == group.Key) * (valores.ValorDaMensalidade + valores.ValorTerceiro) + " | " + (group.FirstOrDefault(c => c.CodigoDocliente == group.Key).Clientes.ClienteAtivo ? " (A)" : "D"),
            Grupo = group.Key,
            Itens = group.ToList()
        })
        .ToList();

    var somaAtivos = itensAtivos.Select(x => new
    {
        conta = x.Itens.Count,
        cotas = x.Itens.Sum(s => s.Valor) / 10000,
        valor = x.Itens.Count * (valores.ValorDaMensalidade + valores.ValorTerceiro)
    });
}
<style>
    .center {
        text-align: center;
    }
</style>
<div id="content" class="page-content clearfix">
    <div class="contentwrapper">
        <!--Content wrapper-->
        <div class="heading">
            <!--  .heading-->
            <h3>Gerar Gestão</h3>
            <ul class="breadcrumb">
                <li></li>
                <li>
                    <a href="#" class="tip" title="voltar para home">
                        <i class="s16 icomoon-icon-screen-2"></i>
                    </a>
                    <span class="divider">
                        <i class="s16 icomoon-icon-arrow-right-3"></i>
                    </span>
                </li>
                <li class="active">Blank Page</li>
            </ul>
        </div>
        <!-- End  / heading-->
        <!-- Start .row -->
        <div class="row">
            <div class="panel panel-default toggle">
                <!-- Start .panel -->
                <div class="panel-body">
                    <div class="form-horizontal">
                        <div class="form-group">
                            <div class="col-md-12">
                                <span><strong>Taxa Gestão </strong>R$ @ViewBag.Gestao</span><span><strong> | Terceiro </strong>R$ @ViewBag.Terceiro</span>@*<span><strong> | Data de vencimento </strong>01/@DateTime.Now.AddMonths(1).Month.ToString().PadLeft(2, '0')/@DateTime.Today.Year</span>*@
                            </div>
                            <div class="col-md-8">
                                @Html.Label("Clientes", htmlAttributes: new {@class = "control-label"})
                                @*@Html.DropDownList("Cliente", null, todos, htmlAttributes: new {@class = "form-control select2"})*@
                                
                                <select id="Cliente" name="Cliente" class="form-control select2" multiple>
                                    <optgroup label="TODOS ATIVOS">
                                        <option value="0">@Html.Raw("-- GERAR GESTÃO PARA TODOS OS "+ itensAtivos.Count+ " CLIENTES | " + somaAtivos.Sum(x => x.conta) + " ITENS | TOTAL R$ " + $"{somaAtivos.Sum(x => x.valor):N2}" + " --")</option>
                                    </optgroup>
                                    @foreach (var clientes in itensTodos)
                                    {
                                        <optgroup label="@clientes.Cliente">
                                            @foreach (var item in clientes.Itens)
                                            {
                                                <option value="@item.CodigoDoItem" >@Html.Raw(item.CodigoDoItem +" "+ item.Placa1DoVeiculo + " - " + item.DescricaoDoModelo + " | GESTÃO " + (valores.ValorDaMensalidade + valores.ValorTerceiro) + (item.DataDaDesativacao == null ? "" : " | (D) " + item.DataDaDesativacao.Value.ToShortDateString()))</option> 
                                            }
                                            
                                        </optgroup>
                                    }
                                </select>
                            </div>                           
                            <div id="item" class="col-md-2">
                                @Html.Label("Vencimento", htmlAttributes: new { @class = "control-label" })
                                <input type="text" name="Vencimento" id="Vencimento" value="@Html.Raw(data.ToShortDateString())" class="form-control" />
                            </div>
                            <div class="col-md-2">
                                <div style="margin-top: 25px; float: right;">
                                    <button id="Gerar" class="btn btn-info"><span class="icon icomoon-icon-spinner-8"></span> Gerar Gestão</button>
                                </div>
                            </div>
                            <div class="col-md-8">
                                @Html.Label("Sinistros", htmlAttributes: new { @class = "control-label" })
                                @*@Html.DropDownList("sinistros", null, htmlAttributes: new {@class = "form-control select2", multiple = "multiple" })*@
                                <select name="sinistros" id="sinistros" class="form-control select2" multiple>
                                    @*<option selected value="0">-- Selecione um ou mais Sinistros --</option>*@
                                    @foreach (var sin in sinistros)
                                    {
                                        <option value="@sin.CodigoDoSinistro">@sin.descricao</option>
                                    }
                                </select>
                            </div>
                            <div class="col-md-2">
                                <label class="control-label" for="Sinistro">Rateio de Sinistros?</label>
                                <select class="select2 form-control" name="sinistro" id="sinistro">
                                    <option selected value="false">NÃO</option>
                                    <option value="true">SIM</option>
                                </select>
                            </div>                            
                            <div class="col-md-2">
                                <label class="control-label" for="Sinistro">Parcelas</label>
                                <select class="select2 form-control" name="Parcelas" id="Parcelas">
                                    @for (int i = 1; i <= 12; i++)
                                    {
                                        <option value="@i">@i</option>
                                    }                                    
                                </select>
                            </div> 
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <!-- col-lg-12 start here -->
            <div class="panel panel-default">
                <!-- Start .panel -->
                <div class="panel-heading">                    
                </div>
                <div class="panel-body">
                    <div id="retorno"></div>                        
                </div>
            </div>
        </div>
        <div class="row">
                <!-- col-lg-12 start here -->
                <div class="panel panel-default">
                    <!-- Start .panel -->
                    <div class="panel-heading">
                        <h4 class="panel-title">Lista Gestão Ativos</h4>
                    </div>
                    <div class="panel-body">
                        <table class="table table-striped table-bordered" cellspacing="0" width="100%" id="tabela">
                            <thead>
                                <tr>
                                    <th width="10"></th>
                                    <th width="30" align="center">Cod</th>
                                    <th>CFC</th>
                                    <th width="10">Itens</th>
                                    <th width="10">Cotas</th>
                                    <th width="100">Valor</th>
                                </tr>
                            </thead>
                            <tfoot>
                                <tr>
                                    <th colspan="3" style="text-align: right">Itens</th>
                                    <th></th>
                                    <th style="text-align: right">Total</th>
                                    <th></th>
                                </tr>
                            </tfoot>
                        </table>
                    </div>
                </div>
            </div>
            <!-- End .row -->
        </div>
    <!-- End contentwrapper -->
</div>

<script>

    function seleciona(tipo) {
        itens = tipo;
        console.log(tipo);
        $('#tabela').DataTable().ajax.reload();
    }

    var itens;

    $(document).ready(function () {
        $("#adicionarBtn").appendTo($(".panel-title"));
        $("#Vencimento").mask("99/99/9999");

        $("#Cliente").select2({
            placeholder: 'Selecione Todos, um ou mais Clientes',
            matcher: function(term, text, opt) {
                return text.toUpperCase().indexOf(term.toUpperCase()) >= 0 ||
                    opt.parent("optgroup").attr("label").toUpperCase().indexOf(term.toUpperCase()) >= 0;
            }
        });
        $("#sinistros").select2({
            placeholder: 'Selecione um ou mais Sinistros'
        });

        $("#Gerar").on('click',function () {
                //var item = $("#Itens").val();
                var cliente = $("#Cliente").val();
                var data = $("#Vencimento").val();
                var parcelas = $("#Parcelas").val();
                var sinistros = $("#sinistros").val();
                var sinistro = $("#sinistro").val();

            $.post('@Url.Action("GestaoGerada", "Movimentacao")',
            {
                cliente: cliente,
                sinistros: sinistros,
                vencimento: data,
                sinistro: sinistro,
                parcelas: parcelas
            }, function (data) {
                $("#retorno").html(data);                    
                $("#sinistros").select2('val', '');                    
            });
    });

        //------------- Ajax table deferred load -------------//

        function fnFormatDetails(oTable, nTr) {
            var aData = oTable.fnGetData(nTr);
            var id = aData[1];
            var html = 'empty';
            $.ajax(
            {
                url: "/Admin/Home/GetRowDetail/",
                type: "POST",
                data: { id: id },
                async: false,
                cache: false,
                success: function (response) {
                    html = response;
                },
                error: function () {
                    alert("Algo deu errado ao importar os itens deste cliente.");
                }
            });
            return html;
        }

        var dt = $('#tabela').dataTable({
            "bServerSide": true,
            "sAjaxSource": "/Admin/Movimentacao/ListaGestao/",
            "fnServerParams": function (aoData) {
                aoData.push({ "name": "itens", "value": itens });
            },
            "bProcessing": true,
            "aoColumns": [
                {
                    "sName": "Expand",
                    bSortable: false,
                    "mRender": function (data, type, row) {
                        return '<div class="s16 icomoon-icon-car detail" style="color:#5da423; cursor:pointer"></div>';
                    }
                },
                {
                    "sName": "Codigo",
                    "bSearchable": false,
                    "bSortable": false,
                    "mRender": function (data, type, row) {
                        return '<strong><a href="/Admin/Clientes/Details/' +
                            row[1] +
                            '" class="color-red-dark" style="cursor:pointer" title="Detalhes">' +
                            row[1] +
                            '</a></strong>';
                    },
                    "sClass": "center"
                },
                { "sName": "NomeCFC", "bSortable": false },
                { "sName": "Itens", "sClass": "center", "bSortable": false },
                //{ "sName": "Itens", "sClass": "center", "bSortable": false   },
                { "sName": "Cotas", "sClass": "center", "bSortable": false },
                { "sName": "ValorGestao", "bSortable": false }
            ],
            "lengthMenu": [[10, 25, 50, 100, 200, 500, -1], [10, 25, 50, 100, 200, 500, "Tudo"]],
            "oLanguage": {
                "sEmptyTable": "Nenhum registro encontrado",
                "sInfo": "Mostrando de _START_ até _END_ de _TOTAL_ registros",
                "sInfoEmpty": "Mostrando 0 até 0 de 0 registros",
                "sInfoFiltered": "(Filtrados de _MAX_ registros)",
                "sInfoPostFix": "",
                "sInfoThousands": ".",
                "sLengthMenu": "_MENU_",
                "sLoadingRecords": "Carregando...",
                "sProcessing": "Processando...",
                "sZeroRecords": "Nenhum registro encontrado",
                "sSearch": "CFC",
                "oPaginate": {
                    "sNext": "Próximo",
                    "sPrevious": "Anterior",
                    "sFirst": "Primeiro",
                    "sLast": "Último"
                },
                "oAria": {
                    "sSortAscending": ": Ordenar colunas de forma ascendente",
                    "sSortDescending": ": Ordenar colunas de forma descendente"
                }
            },
            "sDom":
                "T<'row'<'col-md-5 col-xs-12 'l><'col-md-5 col-xs-12'f>r>t<'row'<'col-md-4 col-xs-12'i><'col-md-8 col-xs-12'p>>",
            tableTools: {
                "sSwfPath": "http://cdn.datatables.net/tabletools/2.2.2/swf/copy_csv_xls_pdf.swf",
                "aButtons": [
                    {
                        "sExtends": "print",
                        "sButtonText": "<span><i class='s16  icomoon-icon-print'></i> Imprimir </span>"
                    }
                    //"copy",
                    //"csv",
                    //"xls",
                    //"print",
                    //"select_all",
                    //"select_none"
                ]
            },
            "footerCallback": function ( row, data1, start, end, display ) {
                var api = this.api(), data1;

                // Remove the formatting to get integer data for summation
                var intVal = function (i) {
                    return typeof i === 'string' ?
                        i.replace(/[\$,]/g, '') * 1 :
                        typeof i === 'number' ?
                        i : 0;
                };

                // Total over all pages
                var total = api
                    .column(5)
                    .data()
                    .reduce(function (a, b) {
                        return intVal(a) + intVal(b);
                    }, 0);

                var itens = api
                    .column(3)
                    .data()
                    .reduce(function (a, b) {
                        return intVal(a) + intVal(b);
                    }, 0);

                // Total over this page
                //var pageTotal = api
                //    .column(5, { page: 'current' })
                //    .data()
                //    .reduce(function (a, b) {
                //        return intVal(a) + intVal(b);
                //   }, 0);

                function formatReal(int) {
                    var tmp = int + '';
                    tmp = tmp.replace(/([0-9]{2})$/g, ",$1");
                    if (tmp.length > 6)
                        tmp = tmp.replace(/([0-9]{3}),([0-9]{2}$)/g, ".$1,$2");

                    return tmp;
                }

                // Update footer
                $(api.column(3).footer()).html(
                    /*'R$ '+pageTotal + ' (*/itens
                );
                $(api.column(5).footer()).html(
                    /*'R$ '+pageTotal + ' (*/formatReal(total)
                );
            }
        });

        /* define onClick event handlers for expand/collapse icon*/
        $('#tabela').on('click',
            'tbody tr td div.detail',
            function () {
                var trElement = this.parentNode.parentNode;

                var $detailIconElement = $(this);

                //if the row is open, close it
                if ($detailIconElement.hasClass('icomoon-icon-truck')) {
                    //change the icon
                    $detailIconElement.removeClass('icomoon-icon-truck');
                    $detailIconElement.addClass(' icomoon-icon-car');
                    $detailIconElement.css('color', '#5da423');
                    //close the row
                    dt.fnClose(trElement);
                } else //the row is closed, open it
                {
                    //change the icon
                    $detailIconElement.removeClass(' icomoon-icon-car');
                    $detailIconElement.addClass('icomoon-icon-truck');
                    $detailIconElement.css('color', '#c60f13');
                    //open the row
                    dt.fnOpen(trElement, fnFormatDetails(dt, trElement), 'details');
                }
            });
    });
</script>